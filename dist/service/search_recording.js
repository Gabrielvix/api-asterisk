"use strict";var{exec}=require("child_process");const fs=require("fs");async function BuscaGravacao(a,b){const c=a.body.uniqueid;return c?void exec(`find /var/spool/asterisk/monitor/ -name "*${c}*"`,(a,d,e)=>{if(a)return console.error(`Erro ao executar o comando: ${a}`),b.status(500).send("Erro ao executar o comando.");if(e)return console.error(`Erro ao buscar o arquivo: ${e}`),b.status(500).send("Erro ao buscar o arquivo.");const f=d.split("\n").filter(a=>""!==a.trim());if(0===f.length)return console.log(`Nenhum arquivo encontrado para o uniqueid ${c}`),b.status(404).send("Nenhum arquivo encontrado.");const g=f[0].trim(),h=g.replace(/(\.gsm|\.wav)$/,".mp3");exec(`ffmpeg -i "${g}" -acodec libmp3lame "${h}" -y -loglevel error`,(a,c)=>{if(a)return console.error(`Erro ao converter o arquivo: ${c}`),b.status(500).send("Erro ao converter o arquivo.");const d=fs.statSync(h);b.set({"Content-Type":"audio/mpeg","Content-Length":d.size,"Accept-Ranges":"bytes"});const e=fs.createReadStream(h);e.pipe(b)})}):b.status(400).send("UniqueID n\xE3o fornecido.")}const authenticateAndDownloadRecording=async(a,b)=>{try{return await BuscaGravacao(a,b)}catch(a){throw new Error(`Error: ${a.message}`)}};module.exports={authenticateAndDownloadRecording};